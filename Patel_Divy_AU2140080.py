# -*- coding: utf-8 -*-
"""Filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_90eiLAzMugrJDU1Kd5hfbd7d36whRd

# Convolution visualization

https://ezyang.github.io/convolution-visualizer/
"""

from IPython.display import Image
Image(url='https://miro.medium.com/max/658/0*nHjlPyCcgSTo9iOm.gif')

"""> Freeze for first cell"""

Image(url='https://i.ibb.co/qjWWwvg/convolution.jpg')

"""# Input Image"""

! wget -O 'lena_color.jpg' https://i.ibb.co/sRcg28H/lena-color.jpg

Image(url='https://i.ibb.co/sRcg28H/lena-color.jpg')

# Import required libraries

import numpy as np
import cv2
import matplotlib.pyplot as plt

"""# Sobel Edge Detection"""

Image(url='https://i0.wp.com/www.adeveloperdiary.com/wp-content/uploads/2019/05/How-to-implement-Sobel-edge-detection-using-Python-from-scratch-adeveloperdiary.com-sobel-sobel-operator.jpg?w=700')

# with filter convolution

filter = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]) # filter for sobel edge detection

image = cv2.imread('lena_color.jpg')
image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)     # convert it into gray scale image
                                                    # 3D image to 2D image
             # apply gaussianblur with (3,3) kernal for removing pixel level noise from the image
                                                    # Smoothing out image
                                                    # low noise sensitivity

'''
dst = cv2.filter2D(src, ddepth, kernel)

Input:
    src -  input image.
    ddepth=-1, the output image will have the same depth as the source.
    kernel – convolution kernel (or rather filter), a single-channel floating point matrix.
Output:
    dst – output convolved image
'''

img_sobelx = cv2.filter2D(image, -1, filter)        # convolved with the vertical filter
#print(image_gaus.shape)
print(img_sobelx.shape)
img_sobely = cv2.filter2D(image, -1, np.flip(filter.T, axis=0)) # convolved with the horizontal filter
img_sobel = img_sobelx + img_sobely                 # accumulate both the result

plt.figure(figsize=(25,25))

plt.subplot(1,4,1)
plt.imshow(image,cmap="gray")
plt.title("Input Image", size=20)
plt.axis('off')

plt.subplot(1,4,2)
plt.imshow(img_sobelx,cmap="gray")
plt.title("Sobel X", size=20)
plt.axis('off')

plt.subplot(1,4,3)
plt.imshow(img_sobely,cmap="gray")
plt.title("Sobel Y", size=20)
plt.axis('off')

plt.subplot(1,4,4)
plt.imshow(img_sobel,cmap="gray")
plt.title("Sobel", size=20)
plt.axis('off')

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the input image
image = cv2.imread('lena_color.jpg')
image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

# Apply Gaussian smoothing to the image
image = cv2.GaussianBlur(image, (3, 3), 0)

# Define the Sobel filter
sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
sobel_y = np.flip(sobel_x.T, axis=0)

# Apply correlation using the Sobel filter
img_sobelx = cv2.filter2D(image, -1, sobel_x)
img_sobely = cv2.filter2D(image, -1, sobel_y)

# Compute the gradient magnitude and direction
img_sobel = np.sqrt(img_sobelx**2 + img_sobely**2)
img_sobel = np.uint8(img_sobel)
img_direction = np.arctan2(img_sobely, img_sobelx)

# Display the results
plt.figure(figsize=(25,25))

plt.subplot(1,4,1)
plt.imshow(image,cmap="gray")
plt.title("Input Image", size=20)
plt.axis('off')

plt.subplot(1,4,2)
plt.imshow(img_sobelx,cmap="gray")
plt.title("Sobel X", size=20)
plt.axis('off')

plt.subplot(1,4,3)
plt.imshow(img_sobely,cmap="gray")
plt.title("Sobel Y", size=20)
plt.axis('off')

plt.subplot(1,4,4)
plt.imshow(img_sobel,cmap="gray")
plt.title("Sobel", size=20)
plt.axis('off')

plt.show()

Image(url="https://i.ibb.co/thSG2Fm/Screenshot-50.png")

"""# Prewitt Operator edge detection"""

Image(url='https://www.researchgate.net/profile/S-N-Kumar/publication/317754223/figure/fig3/AS:565335482351616@1511797890242/Masks-for-the-Prewitt-gradient-edge-detector-The-Laplacian-operator-is-based-on-second.png')

#prewitt
kernelx = np.array([[-1,0,1],[-1,0,1],[-1,0,1]])    # prewitt x kernel
kernely = np.array([[1,1,1],[0,0,0],[-1,-1,-1]])

image = cv2.imread('lena_color.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)     # convert it into gray scale image
                                                    # 3D image to 2D image
image = cv2.GaussianBlur(image,(3,3),0)             # apply gaussianblur with (3,3) kernal for removing pixel level noise from the image
                                                    # Smoothing out image
                                                    # low noise sensitivity


img_prewittx = cv2.filter2D(image, -1, kernelx)     # convolved with the vertical filter
img_prewitty = cv2.filter2D(image, -1, kernely)     # convolved with the horizontal filter
img_prewitt = img_prewittx + img_prewitty           # accumulate both the result

#////////////////////////////////////
plt.figure(figsize=(25,25))

plt.subplot(1,4,1)
plt.imshow(image)
plt.title("Input Image", size=20)
plt.axis('off')

plt.subplot(1,4,2)
plt.imshow(img_prewittx)
plt.title("Prewitt X", size=20)
plt.axis('off')

plt.subplot(1,4,3)
plt.imshow(img_prewitty)
plt.title("Prewitt Y", size=20)
plt.axis('off')

plt.subplot(1,4,4)
plt.imshow(img_prewitt)
plt.title("Prewitt", size=20)
plt.axis('off')

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the input image
image = cv2.imread('lena_color.jpg')
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian smoothing to the image
image = cv2.GaussianBlur(image, (3, 3), 0)

# Define the Prewitt kernels
kernel_x = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
kernel_y = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])

# Apply correlation using the Prewitt kernels
img_prewittx = cv2.filter2D(image, -1, kernel_x)
img_prewitty = cv2.filter2D(image, -1, kernel_y)

# Compute the gradient magnitude
img_prewitt = np.abs(img_prewittx) + np.abs(img_prewitty)

# Display the results
plt.figure(figsize=(25,25))

plt.subplot(1,4,1)
plt.imshow(image,cmap="gray")
plt.title("Input Image", size=20)
plt.axis('off')

plt.subplot(1,4,2)
plt.imshow(img_prewittx,cmap="gray")
plt.title("Prewitt X", size=20)
plt.axis('off')

plt.subplot(1,4,3)
plt.imshow(img_prewitty,cmap="gray")
plt.title("Prewitt Y", size=20)
plt.axis('off')

plt.subplot(1,4,4)
plt.imshow(img_prewitt,cmap="gray")
plt.title("Prewitt", size=20)
plt.axis('off')

plt.show()